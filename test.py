#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DNS Failover
"""

import sys
import os
import yaml
import requests
import socket
from dns_failover import CloudflareAPI, ServerMonitor


def test_cloudflare_connection(config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare API...")
    
    try:
        cf_config = config['cloudflare']
        api = CloudflareAPI(cf_config['api_token'], cf_config['zone_id'])
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å DNS –∑–∞–ø–∏—Å—å
        record = api.get_dns_record(cf_config['domain_name'], config['dns']['record_type'])
        
        if record:
            print(f"‚úÖ Cloudflare API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –¢–µ–∫—É—â–∞—è DNS –∑–∞–ø–∏—Å—å: {record['name']} -> {record['content']}")
            print(f"   TTL: {record['ttl']} —Å–µ–∫—É–Ω–¥")
            return True
        else:
            print(f"‚ùå DNS –∑–∞–ø–∏—Å—å –¥–ª—è {cf_config['domain_name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare: {e}")
        return False


def test_server_connectivity(config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º...")
    
    monitor = ServerMonitor(config['monitoring']['timeout'])
    results = {}
    
    for server_name, server_config in config['servers'].items():
        print(f"\n   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {server_name} ({server_config['ip']}:{server_config['port']})...")
        
        # TCP —Ç–µ—Å—Ç
        tcp_result = monitor.check_tcp_connection(server_config['ip'], server_config['port'])
        print(f"   {'‚úÖ' if tcp_result else '‚ùå'} TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'OK' if tcp_result else 'FAILED'}")
        
        # HTTP —Ç–µ—Å—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if config['monitoring'].get('check_method') == 'http':
            http_result = monitor.check_http_connection(
                server_config['ip'], 
                server_config['port'],
                config['monitoring'].get('http_check_path', '/')
            )
            print(f"   {'‚úÖ' if http_result else '‚ùå'} HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞: {'OK' if http_result else 'FAILED'}")
            results[server_name] = tcp_result and http_result
        else:
            results[server_name] = tcp_result
    
    return results


def test_dns_update(config, dry_run=True):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS {'(DRY RUN)' if dry_run else ''}...")
    
    try:
        cf_config = config['cloudflare']
        api = CloudflareAPI(cf_config['api_token'], cf_config['zone_id'])
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é DNS –∑–∞–ø–∏—Å—å
        record = api.get_dns_record(cf_config['domain_name'], config['dns']['record_type'])
        if not record:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DNS –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        current_ip = record['content']
        print(f"   –¢–µ–∫—É—â–∏–π IP: {current_ip}")
        
        # –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π IP –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        test_ip = None
        for server_name, server_config in config['servers'].items():
            if server_config['ip'] != current_ip:
                test_ip = server_config['ip']
                break
        
        if not test_ip:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ IP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
        
        if dry_run:
            print(f"   ‚úÖ DNS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π IP: {test_ip})")
            print("   üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --real-test")
            return True
        else:
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –Ω–∞ {test_ip}...")
            
            success = api.update_dns_record(
                record['id'],
                cf_config['domain_name'],
                test_ip,
                config['dns']['record_type'],
                config['dns']['ttl']
            )
            
            if success:
                print(f"   ‚úÖ DNS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {test_ip}")
                
                # –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
                print(f"   üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –Ω–∞ {current_ip}...")
                restore_success = api.update_dns_record(
                    record['id'],
                    cf_config['domain_name'],
                    current_ip,
                    config['dns']['record_type'],
                    config['dns']['ttl']
                )
                
                if restore_success:
                    print(f"   ‚úÖ DNS –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {current_ip}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è DNS! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
                
                return success and restore_success
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DNS: {e}")
        return False


def test_configuration_validation(config_path):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = ['cloudflare', 'servers', 'monitoring', 'dns']
        for section in required_sections:
            if section not in config:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}'")
        
        if errors:
            for error in errors:
                print(f"‚ùå {error}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cf_config = config['cloudflare']
        required_cf_params = ['api_token', 'zone_id', 'domain_name']
        for param in required_cf_params:
            if not cf_config.get(param) or cf_config[param].startswith("YOUR_"):
                errors.append(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å cloudflare.{param}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        if len(config['servers']) < 2:
            errors.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–µ—Ä–≤–µ—Ä–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
        priorities = [s['priority'] for s in config['servers'].values()]
        if len(set(priorities)) != len(priorities):
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if config['monitoring']['check_interval'] < 30:
            warnings.append("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–≥—É—Ç –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã")
        
        if config['dns']['ttl'] < 60:
            warnings.append("TTL –º–µ–Ω—å—à–µ 60 —Å–µ–∫—É–Ω–¥ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if errors:
            for error in errors:
                print(f"‚ùå {error}")
            return None
        
        if warnings:
            for warning in warnings:
                print(f"‚ö†Ô∏è  {warning}")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS Failover')
    parser.add_argument(
        '--config', '-c',
        default='config.yaml',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--real-test',
        action='store_true',
        help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS (–±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–µ–Ω DNS)'
    )
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DNS Failover System")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = test_configuration_validation(args.config)
    if not config:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudflare API
    cf_ok = test_cloudflare_connection(config)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    server_results = test_server_connectivity(config)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    dns_ok = test_dns_update(config, dry_run=not args.real_test)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"{'‚úÖ' if cf_ok else '‚ùå'} Cloudflare API: {'OK' if cf_ok else 'FAILED'}")
    
    print("–°–µ—Ä–≤–µ—Ä—ã:")
    all_servers_ok = True
    for server_name, result in server_results.items():
        print(f"  {'‚úÖ' if result else '‚ùå'} {server_name}: {'OK' if result else 'FAILED'}")
        if not result:
            all_servers_ok = False
    
    print(f"{'‚úÖ' if dns_ok else '‚ùå'} DNS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'OK' if dns_ok else 'FAILED'}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_ok = cf_ok and all_servers_ok and dns_ok
    print(f"\n{'üéâ' if all_ok else '‚ö†Ô∏è '} –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_ok else '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    if all_ok:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞")
    
    sys.exit(0 if all_ok else 1)


if __name__ == "__main__":
    main()