#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π DNS –∑–∞–ø–∏—Å–µ–π
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import socket
import time
import subprocess
import requests
import yaml
from dns_failover import CloudflareAPI
from typing import List, Dict, Optional


class DNSChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
    
    def __init__(self):
        # –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.dns_servers = [
            ("Google DNS", "8.8.8.8"),
            ("Cloudflare DNS", "1.1.1.1"),
            ("OpenDNS", "208.67.222.222"),
            ("Quad9", "9.9.9.9")
        ]
        
        # –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS
        self.online_checkers = [
            ("whatsmydns.net", "https://www.whatsmydns.net/api/details"),
            ("dns.google", "https://dns.google/resolve")
        ]
    
    def resolve_dns_local(self, domain: str) -> Optional[str]:
        """–†–µ–∑–æ–ª–≤–∏–Ω–≥ DNS —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä"""
        try:
            return socket.gethostbyname(domain)
        except socket.gaierror:
            return None
    
    def resolve_dns_specific_server(self, domain: str, dns_server: str) -> Optional[str]:
        """–†–µ–∑–æ–ª–≤–∏–Ω–≥ DNS —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π DNS —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º nslookup –¥–ª—è Windows
            if hasattr(subprocess, 'run'):
                result = subprocess.run(
                    ['nslookup', domain, dns_server],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'Address:' in line and dns_server not in line:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∞–¥—Ä–µ—Å
                            parts = line.split('Address:')
                            if len(parts) > 1:
                                ip = parts[1].strip()
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ IP –∞–¥—Ä–µ—Å
                                try:
                                    socket.inet_aton(ip)
                                    return ip
                                except socket.error:
                                    continue
            return None
        except Exception:
            return None
    
    def check_dns_google_api(self, domain: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —á–µ—Ä–µ–∑ Google DNS API"""
        try:
            url = "https://dns.google/resolve"
            params = {
                "name": domain,
                "type": "A"
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if "Answer" in data and len(data["Answer"]) > 0:
                    return data["Answer"][0]["data"]
            
            return None
        except Exception:
            return None
    
    def check_dns_cloudflare_api(self, domain: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —á–µ—Ä–µ–∑ Cloudflare DNS API"""
        try:
            url = "https://cloudflare-dns.com/dns-query"
            headers = {
                "Accept": "application/dns-json"
            }
            params = {
                "name": domain,
                "type": "A"
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if "Answer" in data and len(data["Answer"]) > 0:
                    return data["Answer"][0]["data"]
            
            return None
        except Exception:
            return None
    
    def comprehensive_dns_check(self, domain: str) -> Dict[str, Optional[str]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
        results = {}
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è {domain}...")
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä
        local_ip = self.resolve_dns_local(domain)
        results["Local DNS"] = local_ip
        print(f"   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π DNS: {local_ip or '–û—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã
        for name, server in self.dns_servers:
            ip = self.resolve_dns_specific_server(domain, server)
            results[name] = ip
            print(f"   üåê {name} ({server}): {ip or '–û—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
        google_ip = self.check_dns_google_api(domain)
        results["Google DNS API"] = google_ip
        print(f"   üîó Google DNS API: {google_ip or '–û—à–∏–±–∫–∞'}")
        
        cloudflare_ip = self.check_dns_cloudflare_api(domain)
        results["Cloudflare DNS API"] = cloudflare_ip
        print(f"   üîó Cloudflare DNS API: {cloudflare_ip or '–û—à–∏–±–∫–∞'}")
        
        return results
    
    def wait_for_dns_propagation(self, domain: str, expected_ip: str, max_wait: int = 300) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π IP: {expected_ip}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {max_wait} —Å–µ–∫—É–Ω–¥")
        
        start_time = time.time()
        check_interval = 15  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        
        while time.time() - start_time < max_wait:
            results = self.comprehensive_dns_check(domain)
            
            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP
            correct_count = sum(1 for ip in results.values() if ip == expected_ip)
            total_count = len([ip for ip in results.values() if ip is not None])
            
            print(f"   üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π IP –Ω–∞ {correct_count}/{total_count} —Å–µ—Ä–≤–µ—Ä–∞—Ö")
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–µ—Ä–Ω—É–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∏—Å—å
            if total_count > 0 and correct_count / total_count >= 0.7:
                elapsed = int(time.time() - start_time)
                print(f"   ‚úÖ DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∏—Å—å –∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥!")
                return True
            
            if time.time() - start_time < max_wait:
                print(f"   ‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ {check_interval} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                time.sleep(check_interval)
        
        print(f"   ‚ö†Ô∏è  –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. DNS –º–æ–∂–µ—Ç –µ—â–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è.")
        return False


def test_dns_change_with_verification(config_path: str = "config.yaml"):
    """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è DNS —Å –ø–æ–ª–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è DNS —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    cf_config = config['cloudflare']
    api = CloudflareAPI(cf_config['api_token'], cf_config['zone_id'])
    checker = DNSChecker()
    domain = cf_config['domain_name']
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π DNS –∑–∞–ø–∏—Å–∏
    record = api.get_dns_record(domain, config['dns']['record_type'])
    if not record:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é DNS –∑–∞–ø–∏—Å—å")
        return False
    
    original_ip = record['content']
    print(f"üìç –ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}")
    
    # –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ IP
    test_ip = None
    for server_name, server_config in config['servers'].items():
        if server_config['ip'] != original_ip:
            test_ip = server_config['ip']
            test_server_name = server_name
            break
    
    if not test_ip:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ IP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    print(f"üîÑ –¢–µ—Å—Ç–æ–≤—ã–π IP: {test_ip} (—Å–µ—Ä–≤–µ—Ä: {test_server_name})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è DNS
        print(f"\nüìã –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DNS:")
        initial_results = checker.comprehensive_dns_check(domain)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–∏
        print(f"\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–∏ –Ω–∞ {test_ip}...")
        success = api.update_dns_record(
            record['id'],
            domain,
            test_ip,
            config['dns']['record_type'],
            config['dns']['ttl']
        )
        
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å DNS –∑–∞–ø–∏—Å—å")
            return False
        
        print("‚úÖ DNS –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ Cloudflare")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Cloudflare API
        time.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        updated_record = api.get_dns_record(domain, config['dns']['record_type'])
        if updated_record and updated_record['content'] == test_ip:
            print(f"‚úÖ Cloudflare API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated_record['content']}")
        else:
            print("‚ö†Ô∏è  Cloudflare API –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS
        print(f"\n‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        propagated = checker.wait_for_dns_propagation(domain, test_ip, max_wait=180)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DNS –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        final_results = checker.comprehensive_dns_check(domain)
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        print(f"\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π DNS –∑–∞–ø–∏—Å–∏ ({original_ip})...")
        restore_success = api.update_dns_record(
            record['id'],
            domain,
            original_ip,
            config['dns']['record_type'],
            config['dns']['ttl']
        )
        
        if restore_success:
            print("‚úÖ DNS –∑–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            time.sleep(5)
            restored_record = api.get_dns_record(domain, config['dns']['record_type'])
            if restored_record and restored_record['content'] == original_ip:
                print(f"‚úÖ Cloudflare API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {restored_record['content']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏!")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        changed_count = sum(1 for ip in final_results.values() if ip == test_ip)
        total_count = len([ip for ip in final_results.values() if ip is not None])
        
        print(f"üéØ –î–æ–º–µ–Ω: {domain}")
        print(f"üìç –ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}")
        print(f"üîÑ –¢–µ—Å—Ç–æ–≤—ã–π IP: {test_ip}")
        print(f"‚úÖ Cloudflare API –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {'–£—Å–ø–µ—à–Ω–æ' if success else '–ù–µ—É–¥–∞—á–∞'}")
        print(f"üåê DNS —Å–µ—Ä–≤–µ—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º IP: {changed_count}/{total_count}")
        print(f"üì° –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ DNS: {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if propagated else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
        print(f"üîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–£—Å–ø–µ—à–Ω–æ' if restore_success else '–ù–µ—É–¥–∞—á–∞'}")
        
        if changed_count > 0:
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: DNS –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ Cloudflare, –Ω–æ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            api.update_dns_record(
                record['id'],
                domain,
                original_ip,
                config['dns']['record_type'],
                config['dns']['ttl']
            )
            print("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except:
            print("‚ùå –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
        
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    parser.add_argument(
        '--config', '-c',
        default='config.yaml',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--domain', '-d',
        help='–î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
    )
    parser.add_argument(
        '--check-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DNS –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    )
    
    args = parser.parse_args()
    
    if args.check_only:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        checker = DNSChecker()
        
        if args.domain:
            domain = args.domain
        else:
            try:
                with open(args.config, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                domain = config['cloudflare']['domain_name']
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è DNS –¥–ª—è {domain}")
        print("=" * 50)
        checker.comprehensive_dns_check(domain)
    else:
        # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        test_dns_change_with_verification(args.config)


if __name__ == "__main__":
    main()